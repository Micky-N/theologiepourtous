generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  password             String
  role                 Role                   @default(USER)
  lastLogin            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  bibleBookmarks       BibleBookmark[]
  bibleNotes           BibleNote[]
  bibleReadingProgress BibleReadingProgress[]
  readingSessions      ReadingSession[]
  readingStats         ReadingStats[]
  userBiblePreference  UserBiblePreference?
  userProgress         UserProgress[]

  @@map("users")
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  theme       String
  percent     Int       @default(0)
  completedAt DateTime?
  startedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_progress_userId_fkey")
  @@map("user_progress")
}

model BibleVersion {
  id                  Int                   @id @default(autoincrement())
  code                String                @unique
  name                String
  language            String                @default("fr")
  year                Int?
  isActive            Boolean               @default(true)
  orderIndex          Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  verses              BibleVerse[]
  readingSessions     ReadingSession[]
  UserBiblePreference UserBiblePreference[]

  @@map("bible_versions")
}

model BibleBook {
  id              Int                    @id @default(autoincrement())
  code            String                 @unique
  name            String
  testament       Testament
  orderIndex      Int
  chapterCount    Int
  createdAt       DateTime               @default(now())
  bookmarks       BibleBookmark[]
  notes           BibleNote[]
  readingProgress BibleReadingProgress[]
  verses          BibleVerse[]

  @@map("bible_books")
}

model BibleVerse {
  id        Int             @id @default(autoincrement())
  chapter   Int
  verse     Int
  text      String          @db.Text
  createdAt DateTime        @default(now())
  versionId Int
  bookId    Int
  bookmarks BibleBookmark[]
  notes     BibleNote[]
  book      BibleBook       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  version   BibleVersion    @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, bookId, chapter, verse])
  @@index([bookId, chapter, verse])
  @@map("bible_verses")
}

model BibleBookmark {
  id        Int        @id @default(autoincrement())
  title     String?
  color     String?    @default("blue")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int
  bookId    Int
  verseId   Int
  book      BibleBook  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  verse     BibleVerse @relation(fields: [verseId], references: [id], onDelete: Cascade)

  @@unique([userId, verseId])
  @@index([bookId], map: "bible_bookmarks_bookId_fkey")
  @@index([verseId], map: "bible_bookmarks_verseId_fkey")
  @@map("bible_bookmarks")
}

model BibleNote {
  id        Int        @id @default(autoincrement())
  title     String?
  content   String     @db.Text
  isPrivate Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int
  bookId    Int
  verseId   Int
  book      BibleBook  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  verse     BibleVerse @relation(fields: [verseId], references: [id], onDelete: Cascade)

  @@index([bookId], map: "bible_notes_bookId_fkey")
  @@index([userId], map: "bible_notes_userId_fkey")
  @@index([verseId], map: "bible_notes_verseId_fkey")
  @@map("bible_notes")
}

model UserBiblePreference {
  id               Int          @id @default(autoincrement())
  defaultVersionId Int
  showVerseNumbers Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           Int          @unique
  defaultVersion   BibleVersion @relation(fields: [defaultVersionId], references: [id])
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([defaultVersionId], map: "user_bible_preferences_defaultVersionId_fkey")
  @@map("user_bible_preferences")
}

model ReadingSession {
  id           Int          @id @default(autoincrement())
  startTime    DateTime
  endTime      DateTime?
  duration     Int?
  chaptersRead String?      @db.Text
  versesRead   Int          @default(0)
  isCompleted  Boolean      @default(false)
  deviceType   String?      @default("web")
  createdAt    DateTime     @default(now())
  userId       Int
  versionId    Int
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  version      BibleVersion @relation(fields: [versionId], references: [id])

  @@index([userId], map: "reading_sessions_userId_fkey")
  @@index([versionId], map: "reading_sessions_versionId_fkey")
  @@map("reading_sessions")
}

model ReadingStats {
  id                  Int        @id @default(autoincrement())
  date                DateTime   @db.Date
  totalReadingTime    Int        @default(0)
  chaptersCompleted   Int        @default(0)
  versesRead          Int        @default(0)
  averageReadingSpeed Float?
  longestSession      Int        @default(0)
  sessionsCount       Int        @default(0)
  booksStarted        String?    @db.Text
  booksCompleted      String?    @db.Text
  favoriteTestament   Testament?
  favoriteReadingTime String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              Int
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("reading_stats")
}

model BibleReadingProgress {
  id             Int       @id @default(autoincrement())
  currentChapter Int       @default(1)
  currentVerse   Int       @default(1)
  completedAt    DateTime?
  startedAt      DateTime  @default(now())
  lastReadAt     DateTime  @default(now())
  totalReadTime  Int       @default(0)
  chaptersRead   String?   @db.Text
  isCompleted    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         Int
  bookId         Int
  book           BibleBook @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@index([bookId], map: "bible_reading_progress_bookId_fkey")
  @@map("bible_reading_progress")
}

enum Role {
  USER
  ADMIN
}

enum Testament {
  OLD
  NEW
}
